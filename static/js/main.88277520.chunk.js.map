{"version":3,"sources":["components/images/time.svg","components/images/user.png","components/Header.js","components/UserCard.js","components/UserItem.js","components/pages/reducers/reducer.js","store.js","components/pages/actions/actionTypes.js","components/pages/actions/actionCreators.js","components/UserList.js","components/pages/Users.js","components/ItemList.js","components/pages/Comments.js","components/pages/Posts.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","this","props","title","Component","UserCard","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","posts","ev","history","push","state","id","comments","name","react","src","avatar","alt","reactstrap_es","outline","color","onClick","ref","postsRef","commentsRef","UserItem","body","defaultState","list","store","createStore","arguments","length","undefined","action","type","objectSpread","toConsumableArray","newPosts","newComments","addUserList","addPostList","addCommentList","UserList","Users","fetchData","fetch","then","response","json","showList","catch","err","setState","error","message","isLoading","data","userList","map","user","key","components_UserCard","getPosts","getState","dispatch","console","log","setTimeout","components_Header","components_UserList","ItemList","Comments","url","inStore","itemList","comment","components_UserItem","exists","arr","index","findIndex","item","obj","find","match","params","storeData","NavLink","to","loader","components_ItemList","Posts","post","storeList","NotFound","App","BrowserRouter","basename","process","Switch","Route","exact","path","component","Home","Boolean","window","location","hostname","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.88277520.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/time.bdee471c.svg\";","module.exports = __webpack_public_path__ + \"static/media/user.1e59a734.png\";","import React, { Component } from 'react';\nimport './css/Header.css'\n\n\nclass Header extends Component {\n    render() {\n        return (\n            <div>\n                <header className=\"app-header\">\n                    <h1>{this.props.title}</h1>\n                </header>\n            </div>\n        )\n    }\n}\n\nexport default Header;","import React, { Component, Fragment } from 'react';\nimport './css/UserCard.css'\nimport avatar from './images/user.png'\nimport { Button } from 'reactstrap';\n\nclass UserCard extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: props.id,\n            name: props.name\n        }\n    }\n\n    posts = (ev) => {\n        this.props.history.push('/posts/' + this.state.id); \n    }\n\n    comments = (ev) => {\n        this.props.history.push('/comments/' + this.state.id);\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <li className=\"user-card\">\n                    <img src={avatar} alt=\"avatar\" />\n                    <h4>{this.state.name}</h4>\n                    <Button outline color=\"secondary\" onClick={this.posts} ref={this.postsRef}>Posts</Button>{' '}\n                    <Button outline color=\"secondary\" onClick={this.comments} ref={this.commentsRef}>Comments</Button>\n                    {/* <input onClick={this.posts} type=\"button\" value=\"Posts\" ref={this.postsRef} />\n                    <input onClick={this.comments} type=\"button\" value=\"Comments\" ref={this.commentsRef} /> */}\n                </li>            \n            </Fragment>\n        )\n    }\n}\n\nexport default UserCard;","import React, { Component, Fragment } from 'react';\nimport './css/UserItem.css'\nimport avatar from './images/user.png'\n\nclass UserItem extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            title: props.title,\n            body: props.body\n        }\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <li className=\"post-item\">\n                    <h2>{this.state.title}</h2>\n                    <p>{this.state.body}</p>\n                </li>\n            </Fragment>\n        )\n    }\n}\n\nexport default UserItem;","import * as actionType from '../actions/actionTypes';\n\nconst defaultState = {\n    list: [],\n    posts: [],\n    comments: []\n}\n\nexport default (state = defaultState, action) => {\n    switch (action.type) {\n        case actionType.ADD_USER_LIST:\n            return { ...state, list: [...action.list] }\n        case actionType.ADD_POST_LIST:\n            var newPosts = [...state.posts];\n            let posts = action.posts\n            newPosts.push(posts);\n            return { ...state, posts: newPosts }\n        case actionType.ADD_COMMENT_LIST:\n            var newComments = [...state.comments];\n            let comments = action.comments\n            newComments.push(comments);\n            return { ...state, comments: newComments }\n        default:\n            return state;\n    }\n}","import { createStore } from 'redux';\nimport reducer from './components/pages/reducers/reducer';\n\nconst store = createStore(reducer);\n\nexport default store;","export const ADD_USER_LIST = 'ADD_USER_LIST';\nexport const ADD_POST_LIST = 'ADD_POST_LIST';\nexport const ADD_COMMENT_LIST = 'ADD_COMMENT_LIST';","import * as action from './actionTypes'\n\nexport const addUserList = (state) => {\n    return {\n        type: action.ADD_USER_LIST,\n        list: state\n    }\n}\n\nexport const addPostList = (id, state) => {\n    return {\n        type: action.ADD_POST_LIST,\n        posts: {\n            id: id,\n            state: state \n        }\n    }\n}\n\nexport const addCommentList = (id, state) => {\n    return {\n        type: action.ADD_COMMENT_LIST,\n        comments: {\n            id: id,\n            state: state\n        }\n    }\n}","import React, { Component, Fragment } from 'react';\nimport './css/UserList.css'\n\nclass UserList extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            list: this.props.list\n        }\n    }\n    \n\n    render() {\n        return (\n            <Fragment>\n                <ul className=\"user-list\">\n                    { this.state.list }\n                </ul>\n            </Fragment>\n        )\n    }\n}\n\nexport default UserList;","import React, { Component, Fragment } from 'react';\nimport { createStore } from 'redux'\nimport Header from '../Header'\nimport Card from '../UserCard'\nimport Item from '../UserItem'\nimport listManager from './reducers/reducer'\nimport store from '../../store'\nimport actionCreator from './actions/actionCreators'\n// import addList from './actions/addList'\nimport UserList from '../UserList'\n\n\nimport { connect } from 'react-redux';\nimport { addUserList } from './actions/actionCreators';\n\n\n// const store = createStore(listManager)\n\nclass Users extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            list: null,\n            isLoading: true\n        }\n    }\n\n  \n\n    fetchData = () => {\n        const url = \"https://jsonplaceholder.typicode.com/users\";\n\n        fetch(url)\n        .then(response => response.json())\n        .then(this.showList)\n        .then()\n        .catch(err => {\n            this.setState({ error: err.message })\n        });\n\n        this.setState({ isLoading: false });\n        // store.dispatch(userL)\n    }\n\n    componentDidMount() {\n        console.log(\"In Users\", store.getState() )\n        if (store.getState().list.length == 0) {\n            console.log(\"FETCH\");\n            setTimeout(this.fetchData, 500)\n        } else {\n            console.log(\"LOAD FROM STORE\");\n            console.log(\"BACK\", store.getState());\n            setTimeout(this.showList(store.getState().list), 500);\n        }\n        \n    }\n\n    showList = (data) => {\n        // this gets called once we have the array data\n        var userList = data.map((user, key) => <Card history={this.props.history} id={user.id} name={user.name} getPosts={this.getPosts} key={key} />)\n        this.setState({ list: userList });\n        if (store.getState().list.length == 0) {\n            store.dispatch(addUserList(data));\n            console.log(\"USER SHOW LIST\", store.getState());\n        } else {\n            this.setState({ isLoading: false });\n        }\n        \n        // console.log(store.getState());\n        // console.log(this.state.list)\n    }\n    \n    render() {\n        return (\n            <Fragment>\n                <Header title={\"Users\"}/>\n                <br />\n                {this.state.isLoading && (\n                    // if loading is true \n                    <span>Loading Users...</span>\n                )}\n                {!this.state.isLoading && this.state.list && (\n                    <UserList list={this.state.list} />\n                )}\n            </Fragment>\n        )\n    }\n}\n\nexport default Users;","import React, { Component, Fragment } from 'react';\nimport './css/UserList.css'\nimport Item from './UserItem'\n\nclass ItemList extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            list: this.props.list\n        }\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <ul className=\"item-list\">\n                    { this.state.list }\n                </ul>\n            </Fragment>\n        )\n    }\n}\n\nexport default ItemList;","import React, { Component } from 'react';\nimport ItemList from '../ItemList'\n\nimport Item from '../UserItem'\nimport Header from '../Header'\nimport '../css/Comments.css'\nimport loader from '../images/time.svg'\nimport { NavLink } from 'react-router-dom';\nimport store from '../../store'\nimport { addCommentList } from './actions/actionCreators';\n\nclass Comments extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            id: this.props.match.params.id,\n            list: null,\n            inStore: false,\n            isLoading: true\n        }\n    }\n\n    fetchData = () => {\n        const url = \"https://jsonplaceholder.typicode.com/comments?postId=\" + this.state.id;\n        fetch(url)\n        .then(response => response.json())\n        .then(this.showList)\n        .then()\n        .catch(err => {\n            this.setState({ error: err.message })\n        });\n\n        this.setState({ isLoading: false })\n    }\n\n    componentDidMount() {\n        var storeData = this.exists(store.getState().comments, this.state.id)\n        console.log(\"In Comments\", store.getState())\n        if (storeData.list != null) {\n            this.state.inStore = true;\n            setTimeout(this.showList(storeData.list), 1000);\n            this.setState({ isLoading: false });\n        } else {\n            setTimeout(this.fetchData, 1000)\n        }\n    }\n\n    showList = (data) => {\n        \n        // this gets called once we have the array data\n        if (!this.state.inStore) {\n            store.dispatch(addCommentList(this.state.id, data));\n        }\n        var itemList = data.map((comment, key) => <Item title={comment.name} body={comment.body} key={key} />)\n        this.setState({ list: itemList });\n    }\n\n    exists = (arr, id) => {\n        var index = arr.findIndex((item) => { return (item.id === id) });\n        var obj = (arr.find((item) => { return (item.id === id) }))\n\n        return {\n            id: index,\n            list: (obj) ? obj.state : null\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Header title={\"Comments\"}/>\n                <NavLink className=\"home-link\" to=\"/\"><h3>Home</h3></NavLink>\n                {this.state.isLoading && (\n                    // if loading is true \n                    <span><img className=\"loader\" src={loader} alt=\"loading...\" /></span>\n                )}\n                {!this.state.isLoading && this.state.list && (\n                    // if loading is false\n                    <ItemList list={this.state.list} />\n                )}\n            </div>\n        )\n    }\n}\n\nexport default Comments;","import React, { Component } from 'react';\nimport '../css/Posts.css'\nimport ItemList from '../ItemList'\nimport Item from '../UserItem'\nimport Header from '../Header'\nimport loader from '../images/time.svg'\nimport { NavLink } from 'react-router-dom';\nimport store from '../../store'\nimport { addPostList } from './actions/actionCreators';\n\nclass Posts extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            id: this.props.match.params.id,\n            list: null,\n            isLoading: true,\n            inStore: false,\n            storeList: null\n        }\n    }\n\n    fetchData = () => {\n        const url = \"https://jsonplaceholder.typicode.com/posts?userId=\" + this.state.id;\n        fetch(url)\n        .then(response => response.json())\n        .then(this.showList)\n        .then()\n        .catch(err => {\n            this.setState({ error: err.message })\n        });\n\n        this.setState({ isLoading: false })\n    }\n\n    componentDidMount() {\n        // console.log(\"Index\", this.exists(store.getState().posts, this.state.id));\n        var storeData = this.exists(store.getState().posts, this.state.id) \n        \n        if (storeData.list != null) {\n            this.state.inStore = true;\n            setTimeout(this.showList(storeData.list), 1000);\n            this.setState({ isLoading: false });\n        } else {\n            setTimeout(this.fetchData, 1000)\n        }\n        \n    }\n\n    showList = (data) => {\n        // this gets called once we have the array data\n        if (!this.state.inStore) {\n            store.dispatch(addPostList(this.state.id, data));\n        }\n      \n        var itemList = data.map((post, key) => <Item title={post.title} body={post.body} key={key} />)\n        this.setState({ list: itemList });\n    }\n\n    exists = (arr, id) => {\n        var index = arr.findIndex((item) => { return (item.id === id) });    \n        var obj = (arr.find((item) => { return (item.id === id)}))\n        \n        return {\n            id: index,\n            list: (obj) ? obj.state : null\n        }\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Header title={\"Posts\"}/>\n                <NavLink className=\"home-link\" to=\"/\"><h3>Home</h3></NavLink>\n                {this.state.isLoading && (\n                    // if loading is true \n                    <span><img className=\"loader\" src={loader} alt=\"loading...\" /></span>\n                )}\n                {!this.state.isLoading && this.state.list && (\n                    // if loading is false\n                    <ItemList list={this.state.list}/>\n                )} \n            </div>\n        )\n    }\n}\n\nexport default Posts;","import React, { Component } from 'react';\nimport Home from './components/pages/Users';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Comments from './components/pages/Comments';\nimport Posts from './components/pages/Posts';\nimport Header from './components/Header'\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/posts\" component={Posts} />\n          <Route path=\"/posts/:id\" component={Posts} />\n          <Route exact path=\"/comments\" component={Comments} />\n          <Route exact path=\"/comments/:id\" component={Comments} />\n          <Route component={NotFound} />\n          {/* <Route component={NotFound} /> */}\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n\n  \n}\n\nfunction NotFound() {\n  return (\n    <div className=\"App\">\n      <h1>Page Does Not Exist</h1>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}